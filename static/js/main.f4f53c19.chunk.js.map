{"version":3,"sources":["components/App/logo.svg","components/AreaDemo/index.tsx","components/AxisDemo/index.tsx","components/CurveDemo/index.tsx","components/DragDemo/index.tsx","components/GeoDemo/index.tsx","components/GlyphDemo/index.tsx","components/GradientsDemo/index.tsx","components/HeatmapsDemo/index.tsx","components/LegendDemo/index.tsx","components/LinesDemo/index.tsx","components/PatternsDemo/index.tsx","components/PolygonsDemo/index.tsx","components/TextDemo/index.tsx","components/ThresholdDemo/index.tsx","components/VoronoiDemo/index.tsx","components/App/index.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","stock","appleStock","slice","formatDate","timeFormat","min","arr","fn","Math","apply","Object","toConsumableArray","map","max","extent","xStock","d","Date","date","yStock","close","bisectDate","bisector","left","AreaDemo","_this$props","this","props","width","height","margin","ruler","xMax","right","yMax","top","bottom","xScale","scaleTime","domain","range","yScale","scaleLinear","nice","react_default","a","createElement","x","y","fill","rx","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","vx_grid_es","lineStyle","pointerEvents","scale","strokeDasharray","stroke","vx_shape_es","curve","curveMonotoneX","data","strokeWidth","onMouseLeave","onMouseMove","onTouchMove","onTouchStart","from","to","style","cx","cy","r","fillOpacity","strokeOpacity","React","Component","AreaDemoWithTooltip","withTooltip","showTooltip","tooltipData","tooltipLeft","tooltipTop","AreaDemo_AreaDemo","assign","event","options","xAccessor","localPoint","x0","invert","index","d0","d1","handleTooltip","vx_tooltip_es","backgroundColor","color","concat","transform","genDateValue","value","numTicksForHeight","numTicksForWidth","AxisDemo","scaleTimeOptions","linearScaleOptions","vx_gradient_es","vertical","fromOpacity","toOpacity","numTicksRows","numTicksColumns","vx_group_es","y0","curveBasis","vx_axis_es","hideZero","numTicks","label","labelProps","fontFamily","fontSize","textAnchor","tickStroke","tickLabelProps","dx","dy","tickComponent","_ref","formattedValue","tickProps","objectWithoutProperties","axis","axisCenter","axisToPoint","axisFromPoint","className","ticks","tick","i","tickX","tickY","tickLength","key","AxisDemoResponsive","withParentSize","parentWidth","AxisDemo_AxisDemo","dateAccessor","valueAccessor","scaleLinearOptions","yAccessor","curves","func","curveBundle","curveLinear","curveMonotoneY","curveNatural","curveStep","CurveDemo","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","arguments","inherits","createClass","c","colors","genItems","num","Array","radius","random","round","genCircles","DragDemo","_this","call","colorScale","genItemsOptions","state","items","scaleOrdinal","nextProps","setState","_this2","touchAction","vx_drag_es","onDragStart","raise","dragStart","dragEnd","dragMove","isDragging","onMouseDown","onMouseUp","onTouchEnd","topology","world","topojson","objects","units","points","features","f","geometry","coordinates","length","scaleQuantize","GeoDemo","centerX","centerY","vx_geo_es","translate","mercator","graticule","g","path","feature","onClick","alert","properties","name","GlyphDemo","vx_glyph_es","GradientsDemo","h","w","genBins","dataBins","undefined","bins","count","colorMax","bucketSizeMax","circleColorScale","rectColorScale","opacityScale","HeatmapsDemo","separation","size","binWidth","values","vx_heatmap_es","gap","heatmap","heatmapColumn","cell","row","column","opacity","JSON","stringify","objectSpread","bin","binHeight","oneDecimalFormat","format","sizeScale","sizeColorScale","quantileScale","linearScale","thresholdScale","scaleThreshold","ordinalColorScale","ordinalColor2Scale","shapeScale","LegendDemos","LegendDemo","title","vx_legend_es","labels","datum","text","align","labelFormat","reverse","toUpperCase","display","flexDirection","shape","shapeProps","isValidElement","cloneElement","children","series","reduce","rec","LinesDemo","_ref2","slicedToArray","rangeRound","dd","LinesDemoResponsive","LinesDemo_LinesDemo","PatternsDemo","pWidth","pHeight","vx_pattern_es","orientation","complement","polygons","rotate","sides","scaleBand","padding","PolygonsDemo","polygon","TextDemo","vx_text_es","angle","verticalAnchor","parseDate","timeParse","nyAccessor","sfAccessor","cityTemperature","minima","maxima","tempMin","tempMax","ThresholdDemo","vx_threshold_es","aboveAreaProps","belowAreaProps","clipAboveTo","clipBelowTo","accessor","toString","VoronoiDemo","_React$PureComponent","svg","handleMouseLeave","bind","assertThisInitialized","handleMouseMove","getUpdatedState","innerWidth","innerHeight","voronoiOptions","voronoiDiagram","voronoi","neighbors","Map","selected","_this$state","ref","vx_clip_path_es","clipPath","hasNeighbors","get","vx_voronoi_es","_getCoordsFromEvent","getCoordsFromEvent","closest","find","cells","halfedges","forEach","edge","edges","set","PureComponent","Div","styled","div","_templateObject","RotatingLogo","img","_templateObject3","keyframes","_templateObject2","Header","header","_templateObject4","Grid","_templateObject5","gridGap","App","src","logo","alt","vx_responsive_es","components_GradientsDemo","components_PatternsDemo","components_PolygonsDemo","components_HeatmapsDemo","components_TextDemo","LegendDemo_LegendDemos","GlyphDemo_GlyphDemo","GeoDemo_GeoDemo","ThresholdDemo_ThresholdDemo","DragDemo_DragDemo","VoronoiDemo_VoronoiDemo","CurveDemo_CurveDemo","defaultProps","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f4f53c19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { curveMonotoneX } from \"@vx/curve\";\nimport { localPoint } from \"@vx/event\";\nimport { GridColumns, GridRows } from \"@vx/grid\";\nimport { appleStock, AppleStockDatum } from \"@vx/mock-data\";\nimport { scaleLinear, scaleTime } from \"@vx/scale\";\nimport { AreaClosed, Bar, Line } from \"@vx/shape\";\nimport { Tooltip, withTooltip, WithTooltipProps } from \"@vx/tooltip\";\nimport { bisector } from \"d3-array\";\nimport { timeFormat } from \"d3-time-format\";\nimport React from \"react\";\n\nimport { IMargin } from \"../../interfaces\";\n\nconst stock = appleStock.slice(800);\nconst formatDate = timeFormat(\"%b %d, '%y\");\n\nconst min = (arr: any, fn: any) => Math.min(...arr.map(fn));\nconst max = (arr: any, fn: any) => Math.max(...arr.map(fn));\nconst extent = (arr: any, fn: any) => [min(arr, fn), max(arr, fn)];\nconst xStock = (d: AppleStockDatum) => new Date(d.date);\nconst yStock = (d: AppleStockDatum) => d.close;\nconst bisectDate = bisector((d: AppleStockDatum) => new Date(d.date)).left;\n\ninterface IRuler {\n  left: number;\n  top: number;\n}\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  onMouseLeave?: (event: MouseEvent) => void;\n  onMouseMove?: (event: MouseEvent) => void;\n  onTouchMove?: EventListener;\n  onTouchStart?: EventListener;\n  ruler?: IRuler;\n  width: number;\n}\n\nclass AreaDemo extends React.Component<IProps> {\n  public render() {\n    const { width, height, margin, ruler } = this.props;\n    if (width < 10) {\n      return null;\n    }\n\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    const xScale = scaleTime({\n      domain: extent(stock, xStock),\n      range: [0, xMax],\n    });\n    const yScale = scaleLinear({\n      domain: [0, max(stock, yStock) + yMax / 3],\n      nice: true,\n      range: [yMax, 0],\n    });\n\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"#32deaa\"\n          rx={14}\n        />\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFFFFF\" stopOpacity={1} />\n            <stop offset=\"100%\" stopColor=\"#FFFFFF\" stopOpacity={0.2} />\n          </linearGradient>\n        </defs>\n        <GridRows\n          lineStyle={{ pointerEvents: \"none\" }}\n          scale={yScale}\n          width={xMax}\n          strokeDasharray=\"2,2\"\n          stroke=\"rgba(255,255,255,0.3)\"\n        />\n        <GridColumns\n          lineStyle={{ pointerEvents: \"none\" }}\n          scale={xScale}\n          height={yMax}\n          strokeDasharray=\"2,2\"\n          stroke=\"rgba(255,255,255,0.3)\"\n        />\n        <AreaClosed\n          curve={curveMonotoneX}\n          data={stock}\n          fill={\"url(#gradient)\"}\n          stroke={\"url(#gradient)\"}\n          strokeWidth={1}\n          x={(d: AppleStockDatum) => xScale(xStock(d))}\n          y={(d: AppleStockDatum) => yScale(yStock(d))}\n          yScale={yScale}\n        />\n        <Bar\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"transparent\"\n          rx={14}\n          data={stock}\n          onMouseLeave={this.props.onMouseLeave}\n          onMouseMove={this.props.onMouseMove}\n          onTouchMove={this.props.onTouchMove}\n          onTouchStart={this.props.onTouchStart}\n        />\n        {ruler && (\n          <g>\n            <Line\n              from={{ x: ruler.left, y: 0 }}\n              to={{ x: ruler.left, y: yMax }}\n              stroke=\"rgba(92, 119, 235, 1.000)\"\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n              strokeDasharray=\"2,2\"\n            />\n            <circle\n              cx={ruler.left}\n              cy={ruler.top + 1}\n              r={4}\n              fill=\"black\"\n              fillOpacity={0.1}\n              stroke=\"black\"\n              strokeOpacity={0.1}\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n            />\n            <circle\n              cx={ruler.left}\n              cy={ruler.top}\n              r={4}\n              fill=\"rgba(92, 119, 235, 1.000)\"\n              stroke=\"white\"\n              strokeWidth={2}\n              style={{ pointerEvents: \"none\" }}\n            />\n          </g>\n        )}\n      </svg>\n    );\n  }\n}\n\ntype IAreaDemoWithTooltipProps = IProps & WithTooltipProps;\n\nfunction handleTooltip(options: any) {\n  const { data, event, xAccessor, xScale, yScale, showTooltip } = options;\n  const { x } = localPoint(event);\n  const x0 = xScale.invert(x);\n  const index = bisectDate(data, x0, 1);\n  const d0 = data[index - 1];\n  const d1 = data[index];\n  let d = d0;\n  if (d1 && d1.date) {\n    d = x0 - xAccessor(d0) > xAccessor(d1) - x0 ? d1 : d0;\n  }\n  showTooltip({\n    tooltipData: d,\n    tooltipLeft: x,\n    tooltipTop: yScale(d.close),\n  });\n}\n\nconst AreaDemoWithTooltip = withTooltip((props: IAreaDemoWithTooltipProps) => {\n  const { margin, height, showTooltip, tooltipData, width } = props;\n  // at first tooltipLeft and tooltipTop are undefined\n  const tooltipLeft = props.tooltipLeft || 0;\n  const tooltipTop = props.tooltipTop || 0;\n\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  const xScale = scaleTime({\n    domain: extent(stock, xStock),\n    range: [0, xMax],\n  });\n  const yScale = scaleLinear({\n    domain: [0, max(stock, yStock) + yMax / 3],\n    nice: true,\n    range: [yMax, 0],\n  });\n\n  const onMouseMove = (event: MouseEvent) => {\n    handleTooltip({\n      data: stock,\n      event,\n      showTooltip,\n      xAccessor: xStock,\n      xScale,\n      yScale,\n    });\n  };\n\n  return (\n    <div>\n      <AreaDemo\n        {...props}\n        onMouseMove={onMouseMove}\n        ruler={{ left: tooltipLeft, top: tooltipTop }}\n      />\n      {tooltipData && (\n        <div>\n          <Tooltip\n            top={tooltipTop - 12}\n            left={tooltipLeft + 12}\n            style={{\n              backgroundColor: \"rgba(92, 119, 235, 1.000)\",\n              color: \"white\",\n            }}\n          >\n            {`$${yStock(tooltipData)}`}\n          </Tooltip>\n          <Tooltip\n            top={yMax - 14}\n            left={tooltipLeft}\n            style={{\n              transform: \"translateX(-50%)\",\n            }}\n          >\n            {formatDate(xStock(tooltipData))}\n          </Tooltip>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport { AreaDemo, AreaDemoWithTooltip };\n","import { AxisBottom, AxisLeft, AxisRight, RenderProps } from \"@vx/axis\";\nimport { curveBasis } from \"@vx/curve\";\nimport { GradientOrangeRed } from \"@vx/gradient\";\nimport { Grid } from \"@vx/grid\";\nimport { Group } from \"@vx/group\";\nimport { DateValueDatum, genDateValue } from \"@vx/mock-data\";\nimport { withParentSize, WithParentSizeProps } from \"@vx/responsive\";\nimport { Accessor, scaleLinear, scaleTime } from \"@vx/scale\";\nimport { Area, Line, LinePath } from \"@vx/shape\";\nimport { extent } from \"d3-array\";\nimport React from \"react\";\n// import { Text } from \"@vx/text\";\nimport { IMargin } from \"../../interfaces\";\n\nconst data = genDateValue(20);\nconst x: Accessor<DateValueDatum, Date> = (d: DateValueDatum) => d.date;\nconst y: Accessor<DateValueDatum, number> = (d: DateValueDatum) => d.value;\n\nfunction numTicksForHeight(height: number) {\n  if (height <= 300) {\n    return 3;\n  }\n  if (300 < height && height <= 600) {\n    return 5;\n  }\n  return 10;\n}\n\nfunction numTicksForWidth(width: number) {\n  if (width <= 300) {\n    return 2;\n  }\n  if (300 < width && width <= 400) {\n    return 5;\n  }\n  return 10;\n}\n\nexport interface IProps {\n  width: number;\n  height: number;\n  margin: IMargin;\n}\n\nconst AxisDemo = (props: IProps) => {\n  const { width, height, margin } = props;\n\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n\n  const scaleTimeOptions = {\n    domain: extent(data, x) as [Date, Date],\n    range: [0, xMax],\n  };\n  const xScale = scaleTime(scaleTimeOptions);\n\n  const linearScaleOptions = {\n    domain: [0, Math.max(...data.map(y))],\n    nice: true,\n    range: [yMax, 0],\n  };\n  const yScale = scaleLinear(linearScaleOptions);\n\n  // const tickComponent = (props: TickOptions) => {\n  //   console.log(\"tickComponent\", tickComponent, \"props\", props)\n  //   const {formattedValue, ...tickProps} = props\n  //   return (<span>{formattedValue}</span>)\n  //   // return (<text x={tickProps.x} y={tickProps.y}>{formattedValue}</text>)\n  // }\n\n  return (\n    <svg width={width} height={height}>\n      <GradientOrangeRed\n        id=\"linear\"\n        vertical={false}\n        fromOpacity={0.8}\n        toOpacity={0.3}\n      />\n      <rect x={0} y={0} width={width} height={height} fill=\"#f4419f\" rx={14} />\n      <Grid\n        top={margin.top}\n        left={margin.left}\n        xScale={xScale}\n        yScale={yScale}\n        stroke=\"rgba(142, 32, 95, 0.9)\"\n        width={xMax}\n        height={yMax}\n        numTicksRows={numTicksForHeight(height)}\n        numTicksColumns={numTicksForWidth(width)}\n      />\n      <Group top={margin.top} left={margin.left}>\n        <Area\n          data={data}\n          x={(d: DateValueDatum) => xScale(x(d))}\n          y0={(d: DateValueDatum) => yScale.range()[0]}\n          y1={(d: DateValueDatum) => yScale(y(d))}\n          stroke={\"transparent\"}\n          strokeWidth={2}\n          fill={\"url(#linear)\"}\n          curve={curveBasis}\n        />\n        <LinePath\n          data={data}\n          x={(d: DateValueDatum) => xScale(x(d))}\n          y={(d: DateValueDatum) => yScale(y(d))}\n          stroke={\"url('#linear')\"}\n          strokeWidth={2}\n          curve={curveBasis}\n        />\n      </Group>\n      <Group left={margin.left}>\n        <AxisLeft\n          top={margin.top}\n          left={0}\n          scale={yScale}\n          hideZero\n          numTicks={numTicksForHeight(height)}\n          label=\"Axis Left Label\"\n          labelProps={{\n            fill: \"#8e205f\",\n            fontFamily: \"Arial\",\n            fontSize: 12,\n            textAnchor: \"middle\",\n          }}\n          stroke=\"#1b1a1e\"\n          tickStroke=\"#8e205f\"\n          tickLabelProps={(value: any, index: number) => ({\n            dx: \"-0.25em\",\n            dy: \"0.25em\",\n            fill: \"#8e205f\",\n            fontFamily: \"Arial\",\n            fontSize: 10,\n            textAnchor: \"end\",\n          })}\n          tickComponent={({ formattedValue, ...tickProps }) => (\n            <text {...tickProps}>{formattedValue}</text>\n          )}\n        />\n        <AxisRight\n          top={margin.top}\n          left={xMax}\n          scale={yScale}\n          hideZero\n          numTicks={numTicksForHeight(height)}\n          label=\"Axis Right Label\"\n          labelProps={{\n            fill: \"#8e205f\",\n            fontFamily: \"Arial\",\n            fontSize: 12,\n            textAnchor: \"middle\",\n          }}\n          stroke=\"#1b1a1e\"\n          tickStroke=\"#8e205f\"\n          tickLabelProps={(value, index) => ({\n            dx: \"0.25em\",\n            dy: \"0.25em\",\n            fill: \"#8e205f\",\n            fontFamily: \"Arial\",\n            fontSize: 10,\n            textAnchor: \"start\",\n          })}\n        />\n        <AxisBottom\n          top={height - margin.bottom}\n          left={0}\n          scale={xScale}\n          numTicks={numTicksForWidth(width)}\n          label=\"Time\"\n        >\n          {(axis: RenderProps) => {\n            const tickLabelSize = 10;\n            const tickRotate = 45;\n            const tickColor = \"#8e205f\";\n            const axisCenter = (axis.axisToPoint.x - axis.axisFromPoint.x) / 2;\n            return (\n              <g className=\"my-custom-bottom-axis\">\n                {axis.ticks.map((tick: any, i: number) => {\n                  const tickX = tick.to.x;\n                  const tickY = tick.to.y + tickLabelSize + axis.tickLength;\n                  return (\n                    <Group\n                      key={`vx-tick-${tick.value}-${i}`}\n                      className={\"vx-axis-tick\"}\n                    >\n                      <Line from={tick.from} to={tick.to} stroke={tickColor} />\n                      <text\n                        transform={`translate(${tickX}, ${tickY}) rotate(${tickRotate})`}\n                        fontSize={tickLabelSize}\n                        textAnchor=\"middle\"\n                        fill={tickColor}\n                      >\n                        {tick.formattedValue}\n                      </text>\n                    </Group>\n                  );\n                })}\n                <text\n                  textAnchor=\"middle\"\n                  transform={`translate(${axisCenter}, 50)`}\n                  fontSize=\"8\"\n                >\n                  {axis.label}\n                </text>\n              </g>\n            );\n          }}\n        </AxisBottom>\n      </Group>\n    </svg>\n  );\n};\n\ninterface IAxisDemoResponsiveProps extends WithParentSizeProps {\n  margin: IMargin;\n}\n\nconst AxisDemoResponsive = withParentSize((props: IAxisDemoResponsiveProps) => {\n  const { margin, parentWidth } = props;\n  // TODO: parentHeight causes a resize every time\n  return <AxisDemo height={400} width={parentWidth} margin={margin} />;\n});\n\nexport { AxisDemo, AxisDemoResponsive };\n\nexport default AxisDemo;\n","import {\n  curveBasis,\n  curveBundle,\n  curveCardinal,\n  curveCatmullRom,\n  curveLinear,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n} from \"@vx/curve\";\nimport { GridColumns, GridRows } from \"@vx/grid\";\nimport { Group } from \"@vx/group\";\nimport { DateValueDatum, genDateValue } from \"@vx/mock-data\";\nimport {\n  scaleLinear,\n  ScaleLinearOptions,\n  scaleTime,\n  ScaleTimeOptions,\n} from \"@vx/scale\";\nimport { LinePath } from \"@vx/shape\";\nimport { extent } from \"d3-array\";\nimport React from \"react\";\n\nimport { IMargin } from \"../../interfaces\";\n\nconst data = genDateValue(15);\n\nconst dateAccessor = (d: DateValueDatum) => d.date;\nconst valueAccessor = (d: DateValueDatum) => d.value;\n\nconst timeDomain = extent(data.map(dateAccessor)) as [Date, Date];\nconst scaleTimeOptions: ScaleTimeOptions = {\n  domain: timeDomain,\n};\nconst xScale = scaleTime(scaleTimeOptions);\n\nconst scaleLinearOptions: ScaleLinearOptions = {\n  domain: [0, Math.max(...data.map(valueAccessor))],\n};\nconst yScale = scaleLinear(scaleLinearOptions);\n\nconst xAccessor = (d: DateValueDatum) => xScale(dateAccessor(d));\nconst yAccessor = (d: DateValueDatum) => yScale(valueAccessor(d));\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  width: number;\n}\n\nconst curves = [\n  { func: curveBasis, stroke: \"#ffffe5\", strokeDasharray: \"2,2\" },\n  { func: curveBundle, stroke: \"#f7fcb9\", strokeDasharray: \"4,1\" },\n  { func: curveLinear, stroke: \"#d9f0a3\", strokeDasharray: \"4\" },\n  { func: curveMonotoneX, stroke: \"#addd8e\", strokeDasharray: \"4,1,2\" },\n  { func: curveMonotoneY, stroke: \"#78c679\", strokeDasharray: \"2,2\" },\n  { func: curveNatural, stroke: \"#41ab5d\", strokeDasharray: \"5,5\" },\n  { func: curveStep, stroke: \"#238443\", strokeDasharray: \"none\" },\n];\n\nexport class CurveDemo extends React.Component<IProps> {\n  public render() {\n    const { height, margin, width } = this.props;\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return (\n      <svg width={width} height={height}>\n        <rect\n          fill=\"#f3f3f3\"\n          height={height}\n          rx={14}\n          width={width}\n          x={0}\n          y={0}\n        />\n        <Group left={margin.left} top={margin.top}>\n          <GridRows\n            height={yMax}\n            scale={yScale}\n            stroke=\"#e0e0e0\"\n            width={xMax}\n          />\n          <GridColumns\n            height={yMax}\n            scale={xScale}\n            stroke=\"#e0e0e0\"\n            width={xMax}\n          />\n          {curves.map((c, i) => {\n            return (\n              <LinePath\n                data={data}\n                key={i}\n                x={xAccessor}\n                y={yAccessor}\n                stroke={c.stroke}\n                strokeWidth={2}\n                strokeDasharray={c.strokeDasharray}\n                curve={c.func}\n              />\n            );\n          })}\n        </Group>\n      </svg>\n    );\n  }\n}\n","import { Drag, IDragProps, IItem, raise } from \"@vx/drag\";\nimport { LinearGradient } from \"@vx/gradient\";\nimport { scaleOrdinal, ScaleOrdinal } from \"@vx/scale\";\nimport React, { ReactText } from \"react\";\n\nimport { IMargin } from \"../../interfaces\";\n\ninterface IGenItemsOptions {\n  height: number;\n  width: number;\n}\n\ninterface IGenCirclesOptions {\n  height: number;\n  num: number;\n  width: number;\n}\n\nconst colors = [\n  \"#025aac\",\n  \"#02cff9\",\n  \"#02efff\",\n  \"#03aeed\",\n  \"#0384d7\",\n  \"#edfdff\",\n  \"#ab31ff\",\n  \"#5924d7\",\n  \"#d145ff\",\n  \"#1a02b1\",\n  \"#e582ff\",\n  \"#ff00d4\",\n  \"#270eff\",\n  \"#827ce2\",\n];\n\nfunction genCircles(options: IGenCirclesOptions) {\n  const { num, width, height } = options;\n  const circles = Array(num)\n    .fill(1)\n    .map((d: number, i: number) => {\n      const radius = 25 - Math.random() * 20;\n      const item: IItem = {\n        id: i,\n        radius,\n        x: Math.round(Math.random() * (width - radius * 2) + radius),\n        y: Math.round(Math.random() * (height - radius * 2) + radius),\n      };\n      return item;\n    });\n  return circles;\n}\n\nconst genItems = (options: IGenItemsOptions) => {\n  const { width, height } = options;\n  const genCirclesOptions = {\n    height,\n    num: width < 360 ? 40 : 185,\n    width,\n  };\n  const items = genCircles(genCirclesOptions);\n  return items;\n};\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  width: number;\n}\n\ninterface IState {\n  items: IItem[];\n}\n\nexport class DragDemo extends React.Component<IProps, IState> {\n  private colorScale: ScaleOrdinal<ReactText, string>;\n\n  constructor(props: IProps) {\n    super(props);\n    const genItemsOptions = { height: props.height, width: props.width };\n    this.state = {\n      items: genItems(genItemsOptions),\n    };\n    this.colorScale = scaleOrdinal({\n      domain: this.state.items.map((d: IItem) => d.id),\n      range: colors,\n    });\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    if (nextProps.width !== this.props.width) {\n      const genItemsOptions = {\n        height: nextProps.height,\n        width: nextProps.width,\n      };\n      this.setState(() => {\n        return {\n          items: genItems(genItemsOptions),\n        };\n      });\n    }\n  }\n\n  public render() {\n    const { width, height } = this.props;\n    return (\n      <div className=\"Drag\" style={{ touchAction: \"none\" }}>\n        <svg width={width} height={height}>\n          <LinearGradient id=\"stroke\" from=\"#ff00a5\" to=\"#ffc500\" />\n          <rect fill=\"#c4c3cb\" width={width} height={height} rx={14} />\n          {this.state.items.map((d: IItem, i: number) => (\n            <Drag\n              key={`${d.id}`}\n              height={height}\n              width={width}\n              onDragStart={() => {\n                // svg follows the painter model\n                // so we need to move the data item\n                // to end of the array for it to be drawn\n                // \"on top of\" the other data items\n                this.setState(state => {\n                  return {\n                    items: raise(state.items, i),\n                  };\n                });\n              }}\n            >\n              {(props: IDragProps) => {\n                const {\n                  dragStart,\n                  dragEnd,\n                  dragMove,\n                  isDragging,\n                  dx,\n                  dy,\n                } = props;\n                return (\n                  <circle\n                    cx={d.x}\n                    cy={d.y}\n                    fill={isDragging ? \"url(#stroke)\" : this.colorScale(d.id)}\n                    fillOpacity={0.9}\n                    key={`dot-${d.id}`}\n                    onMouseDown={dragStart}\n                    onMouseMove={dragMove}\n                    onMouseUp={dragEnd}\n                    onTouchEnd={dragEnd}\n                    onTouchMove={dragMove}\n                    onTouchStart={dragStart}\n                    r={isDragging ? d.radius + 4 : d.radius}\n                    stroke={isDragging ? \"white\" : \"transparent\"}\n                    strokeWidth={2}\n                    transform={`translate(${dx}, ${dy})`}\n                  />\n                );\n              }}\n            </Drag>\n          ))}\n        </svg>\n      </div>\n    );\n  }\n}\n","import { Graticule, Mercator } from \"@vx/geo\";\nimport { scaleQuantize } from \"@vx/scale\";\nimport { extent } from \"d3-array\";\nimport { Feature, FeatureCollection, Geometry, Polygon } from \"geojson\";\nimport React from \"react\";\nimport * as topojson from \"topojson-client\";\n// tslint:disable-next-line no-implicit-dependencies\nimport { Topology } from \"topojson-specification\";\n\nimport worldTopoJson from \"../../static/world-topo.json\";\n\nconst topology = (worldTopoJson as unknown) as Topology;\n\nconst featureOrFeatureCollection = topojson.feature(\n  topology,\n  topology.objects.units\n);\nconst world = featureOrFeatureCollection as FeatureCollection;\n\nconst backgroundColor = \"#f9f7e8\";\nconst countryBordersColor = \"#f9f7e8\";\n\nconst points = world.features.map((f: Feature) => {\n  const polygon = f.geometry as Polygon;\n  return polygon.coordinates.length;\n});\nconst domain = extent(points);\n\nconst colorScale = scaleQuantize({\n  domain,\n  range: [\n    \"#ffb01d\",\n    \"#ffa020\",\n    \"#ff9221\",\n    \"#ff8424\",\n    \"#ff7425\",\n    \"#fc5e2f\",\n    \"#f94b3a\",\n    \"#f63a48\",\n  ],\n});\n\ninterface IProps {\n  height: number;\n  width: number;\n}\n\ninterface IMercator {\n  features: Feature[];\n  path: (g: Geometry) => string; // SVG <path> string\n}\n\nexport class GeoDemo extends React.Component<IProps> {\n  public render() {\n    const { height, width } = this.props;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const scale = (width / 630) * 100;\n\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill={backgroundColor}\n          rx={14}\n        />\n        <Mercator\n          data={world.features}\n          scale={scale}\n          translate={[centerX, centerY + 50]}\n        >\n          {(mercator: IMercator) => {\n            return (\n              <g>\n                <Graticule\n                  graticule={(g: Geometry) => {\n                    return mercator.path(g);\n                  }}\n                  stroke={\"rgba(33,33,33,0.05)\"}\n                />\n                {mercator.features.map((feature: any, i: number) => {\n                  // console.warn(\"feature\", feature);\n                  const { feature: f } = feature;\n                  return (\n                    <path\n                      key={`map-feature-${i}`}\n                      d={mercator.path(f)}\n                      fill={colorScale(f.geometry.coordinates.length)}\n                      stroke={countryBordersColor}\n                      strokeWidth={0.5}\n                      onClick={(event: React.MouseEvent) => {\n                        alert(`clicked: ${f.properties.name} (${f.id})`);\n                      }}\n                    />\n                  );\n                })}\n              </g>\n            );\n          }}\n        </Mercator>\n      </svg>\n    );\n  }\n}\n","import { curveBasis, curveMonotoneX } from \"@vx/curve\";\nimport { GlyphDot } from \"@vx/glyph\";\nimport { Group } from \"@vx/group\";\nimport { DateValueDatum, genDateValue } from \"@vx/mock-data\";\nimport {\n  scaleLinear,\n  ScaleLinearOptions,\n  scaleTime,\n  ScaleTimeOptions,\n} from \"@vx/scale\";\nimport { LinePath } from \"@vx/shape\";\nimport { extent } from \"d3-array\";\nimport React from \"react\";\nimport { IMargin } from \"../../interfaces\";\n\nconst data = genDateValue(15);\n\nconst dateAccessor = (d: DateValueDatum) => d.date;\nconst valueAccessor = (d: DateValueDatum) => d.value;\n\nconst timeDomain = extent(data.map(dateAccessor)) as [Date, Date];\nconst scaleTimeOptions: ScaleTimeOptions = {\n  domain: timeDomain,\n};\nconst xScale = scaleTime(scaleTimeOptions);\n\nconst scaleLinearOptions: ScaleLinearOptions = {\n  domain: [0, Math.max(...data.map(valueAccessor))],\n};\nconst yScale = scaleLinear(scaleLinearOptions);\n\nconst x = (d: DateValueDatum) => xScale(dateAccessor(d));\nconst y = (d: DateValueDatum) => yScale(valueAccessor(d));\n\nconst primary = \"#8921e0\";\nconst secondary = \"#00f2ff\";\nconst contrast = \"#ffffff\";\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  width: number;\n}\n\nclass GlyphDemo extends React.Component<IProps> {\n  public render() {\n    const { height, margin, width } = this.props;\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill={secondary}\n          rx={14}\n        />\n        <Group top={margin.top}>\n          <LinePath\n            data={data}\n            x={x}\n            y={y}\n            stroke={primary}\n            strokeWidth={2}\n            strokeDasharray=\"2,2\"\n            curve={curveBasis}\n          />\n          <LinePath\n            data={data}\n            x={x}\n            y={y}\n            stroke={primary}\n            strokeWidth={3}\n            curve={curveMonotoneX}\n          />\n          {data.map((d, i) => {\n            const cx = x(d);\n            const cy = y(d);\n            return (\n              <g key={`line-point-${i}`}>\n                <GlyphDot\n                  cx={cx}\n                  cy={cy}\n                  r={6}\n                  fill={contrast}\n                  stroke={secondary}\n                  strokeWidth={10}\n                />\n                <GlyphDot\n                  cx={cx}\n                  cy={cy}\n                  r={6}\n                  fill={secondary}\n                  stroke={primary}\n                  strokeWidth={3}\n                />\n                <GlyphDot cx={cx} cy={cy} r={4} fill={contrast} />\n              </g>\n            );\n          })}\n        </Group>\n      </svg>\n    );\n  }\n}\n\nexport { GlyphDemo };\n","import {\n  GradientDarkgreenGreen,\n  GradientLightgreenGreen,\n  GradientOrangeRed,\n  GradientPinkBlue,\n  GradientPinkRed,\n  GradientPurpleOrange,\n  GradientPurpleRed,\n  GradientSteelPurple,\n  GradientTealBlue,\n  RadialGradient,\n} from \"@vx/gradient\";\nimport { Bar } from \"@vx/shape\";\nimport React from \"react\";\n\ninterface IProps {\n  height: number;\n  width: number;\n}\n\nconst GradientsDemo = (props: IProps) => {\n  const { height, width } = props;\n  const h = (height - 50) / 2;\n  const w = width / 4;\n  return (\n    <svg height={height} width={width}>\n      <GradientDarkgreenGreen id=\"DarkgreenGreen\" />\n      <GradientLightgreenGreen id=\"LightgreenGreen\" />\n      <GradientOrangeRed id=\"OrangeRed\" />\n      <GradientPinkBlue id=\"PinkBlue\" />\n      <GradientPinkRed id=\"PinkRed\" vertical={false} />\n      <GradientPurpleOrange id=\"PurpleOrange\" vertical={false} />\n      <GradientPurpleRed id=\"PurpleRed\" vertical={false} />\n      <RadialGradient from=\"#55bdd5\" to=\"#4f3681\" id=\"Radial\" r={\"80%\"} />\n      <GradientSteelPurple id=\"SteelPurple\" vertical={false} />\n      <GradientTealBlue id=\"TealBlue\" vertical={false} />\n      <Bar\n        x={0}\n        y={0}\n        width={w}\n        height={h}\n        fill={`url(#LightgreenGreen)`}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n        rx={14}\n      />\n      <Bar\n        x={w}\n        y={0}\n        width={w}\n        height={h}\n        fill={`url(#OrangeRed)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={w * 2}\n        y={0}\n        width={w}\n        height={h}\n        fill={`url(#PinkBlue)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={w * 3}\n        y={0}\n        width={w}\n        height={h}\n        fill={`url(#DarkgreenGreen)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={0}\n        y={h}\n        width={w}\n        height={h}\n        fill={`url(#PinkRed)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={w}\n        y={h}\n        width={w}\n        height={h}\n        fill={`url(#TealBlue)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={w * 2}\n        y={h}\n        width={w}\n        height={h}\n        fill={`url(#PurpleOrange)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n      <Bar\n        x={w * 3}\n        y={h}\n        width={w}\n        height={h}\n        fill={`url(#Radial)`}\n        rx={14}\n        stroke=\"#ffffff\"\n        strokeWidth={8}\n      />\n    </svg>\n  );\n};\n\nexport default GradientsDemo;\n","import { Group } from \"@vx/group\";\nimport { HeatmapCircle, HeatmapRect } from \"@vx/heatmap\";\nimport { Bin, genBins } from \"@vx/mock-data\";\nimport { scaleLinear } from \"@vx/scale\";\nimport React from \"react\";\nimport { clearLine } from \"readline\";\nimport { IMargin } from \"../../interfaces\";\n\nconst hot1 = \"#77312f\";\nconst hot2 = \"#f33d15\";\nconst cool1 = \"#122549\";\nconst cool2 = \"#b4fbde\";\nconst bg = \"#28272c\";\n\nconst data = genBins(16, 16);\n\ninterface IHeatmapBinDatum {\n  bin: number;\n  bins: number[];\n}\n\ninterface IHeatmapCell {\n  bin: Bin;\n  color: string;\n  column: number;\n  count: number;\n  cx: number;\n  cy: number;\n  datum: IHeatmapBinDatum;\n  gap: number;\n  height: number;\n  opacity: number;\n  r: number;\n  radius: number;\n  row: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\ntype IHeatmapColumn = IHeatmapCell[];\n\n// utils\nconst max = (dataBins: Bin[], value = (d: any) => d) =>\n  Math.max(...dataBins.map(value));\nconst min = (values: number[], value = (d: any) => d) =>\n  Math.min(...values.map(value));\n\n// accessors\nconst bins = (d: any) => d.bins;\nconst count = (d: any) => d.count;\n\nconst colorMax = max(data, (d: any) => max(bins(d), count));\nconst bucketSizeMax = max(data, (d: any) => bins(d).length);\n\n// scales\nconst xScale = scaleLinear({\n  domain: [0, data.length],\n});\nconst yScale = scaleLinear({\n  domain: [0, bucketSizeMax],\n});\nconst circleColorScale = scaleLinear({\n  domain: [0, colorMax],\n  range: [hot1, hot2],\n});\nconst rectColorScale = scaleLinear({\n  domain: [0, colorMax],\n  range: [cool1, cool2],\n});\nconst opacityScale = scaleLinear({\n  domain: [0, colorMax],\n  range: [0.1, 1],\n});\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  separation: number;\n  width: number;\n}\n\nconst HeatmapsDemo = (props: IProps) => {\n  const { height, margin, separation, width } = props;\n  // bounds\n  let size = width;\n  if (size > margin.left + margin.right) {\n    size = width - margin.left - margin.right - separation;\n  }\n\n  const xMax = size / 2;\n  const yMax = height - margin.bottom - margin.top;\n\n  const binWidth = xMax / data.length;\n  const binHeight = yMax / bucketSizeMax;\n  const radius = min([binWidth, binHeight]) / 2;\n\n  xScale.range([0, xMax]);\n  yScale.range([yMax, 0]);\n\n  return (\n    <svg width={width} height={height}>\n      <rect x={0} y={0} width={width} height={height} rx={14} fill={bg} />\n      <Group top={margin.top} left={margin.left}>\n        <HeatmapCircle\n          data={data}\n          xScale={xScale}\n          yScale={yScale}\n          colorScale={circleColorScale}\n          opacityScale={opacityScale}\n          radius={radius}\n          gap={2}\n        >\n          {(heatmap: IHeatmapCell[][]) => {\n            return heatmap.map((heatmapColumn: IHeatmapColumn) => {\n              return heatmapColumn.map((cell: IHeatmapCell) => {\n                return (\n                  <circle\n                    key={`heatmap-circle-${cell.row}-${cell.column}`}\n                    className=\"vx-heatmap-circle\"\n                    cx={cell.cx}\n                    cy={cell.cy}\n                    r={cell.r > 0 ? cell.r : 0}\n                    fill={cell.color}\n                    fillOpacity={cell.opacity}\n                    onClick={(event: React.MouseEvent) => {\n                      const { row, column } = cell;\n                      alert(JSON.stringify({ row, column, ...cell.bin }));\n                    }}\n                  />\n                );\n              });\n            });\n          }}\n        </HeatmapCircle>\n      </Group>\n      <Group top={margin.top} left={xMax + margin.left + separation}>\n        <HeatmapRect\n          data={data}\n          xScale={xScale}\n          yScale={yScale}\n          colorScale={rectColorScale}\n          opacityScale={opacityScale}\n          binWidth={binWidth}\n          binHeight={binWidth}\n          gap={2}\n        >\n          {(heatmap: IHeatmapCell[][]) => {\n            return heatmap.map((heatmapColumn: IHeatmapColumn) => {\n              return heatmapColumn.map((cell: IHeatmapCell) => {\n                return (\n                  <rect\n                    key={`heatmap-rect-${cell.row}-${cell.column}`}\n                    className=\"vx-heatmap-rect\"\n                    width={cell.width > 0 ? cell.width : 0}\n                    height={cell.height > 0 ? cell.height : 0}\n                    x={cell.x}\n                    y={cell.y}\n                    fill={cell.color}\n                    fillOpacity={cell.opacity}\n                    onClick={(event: React.MouseEvent) => {\n                      const { row, column } = cell;\n                      alert(JSON.stringify({ row, column, ...cell.bin }));\n                    }}\n                  />\n                );\n              });\n            });\n          }}\n        </HeatmapRect>\n      </Group>\n    </svg>\n  );\n};\n\nexport default HeatmapsDemo;\n","import { GlyphDiamond, GlyphStar, GlyphTriangle, GlyphWye } from \"@vx/glyph\";\nimport {\n  Legend,\n  LegendItem,\n  LegendLabel,\n  LegendLinear,\n  LegendOrdinal,\n  LegendQuantile,\n  LegendSize,\n  LegendThreshold,\n} from \"@vx/legend\";\nimport {\n  scaleLinear,\n  scaleOrdinal,\n  scaleQuantize,\n  scaleThreshold,\n} from \"@vx/scale\";\nimport { format } from \"d3-format\";\nimport React from \"react\";\n\nconst oneDecimalFormat = format(\".1f\");\n\nconst sizeScale = scaleLinear({\n  domain: [0, 10],\n  range: [10, 30],\n});\n\nconst sizeColorScale = scaleLinear({\n  domain: [0, 10],\n  range: [\"#75fcfc\", \"#3236b8\"],\n});\n\nconst quantileScale = scaleQuantize({\n  domain: [0, 0.15],\n  range: [\"#eb4d70\", \"#f19938\", \"#6ce18b\", \"#78f6ef\", \"#9096f8\"],\n});\n\nconst linearScale = scaleLinear({\n  domain: [0, 10],\n  range: [\"#ed4fbb\", \"#e9a039\"],\n});\n\nconst thresholdScale = scaleThreshold({\n  domain: [0.01, 0.02, 0.04, 0.06, 0.08, 0.1],\n  range: [\"#f2f0f7\", \"#dadaeb\", \"#bcbddc\", \"#9e9ac8\", \"#756bb1\", \"#54278f\"],\n});\n\nconst ordinalColorScale = scaleOrdinal({\n  domain: [\"a\", \"b\", \"c\", \"d\"],\n  range: [\"#66d981\", \"#71f5ef\", \"#4899f1\", \"#7d81f6\"],\n});\n\nconst ordinalColor2Scale = scaleOrdinal({\n  domain: [\"a\", \"b\", \"c\", \"d\"],\n  range: [\"#fae856\", \"#f29b38\", \"#e64357\", \"#8386f7\"],\n});\n\nconst shapeScale = scaleOrdinal({\n  domain: [\"a\", \"b\", \"c\", \"d\", \"e\"],\n  range: [\n    <GlyphStar size={50} top={50 / 6} left={50 / 6} fill=\"#dd59b8\" />,\n    <GlyphWye size={50} top={50 / 6} left={50 / 6} fill=\"#de6a9a\" />,\n    <GlyphTriangle size={50} top={50 / 6} left={50 / 6} fill=\"#de7d7b\" />,\n    <GlyphDiamond size={50} top={50 / 6} left={50 / 6} fill=\"#df905f\" />,\n    (props: any) => (\n      <text fontSize=\"12\" dy=\"1em\" dx=\".33em\" fill=\"#e0a346\">\n        $\n      </text>\n    ),\n  ],\n});\n\ninterface IProps {\n  height: number;\n  width: number;\n}\n\nconst LegendDemos = (props: IProps) => {\n  return (\n    <div className=\"chart\">\n      <LegendDemo title=\"Size\">\n        <LegendSize scale={sizeScale}>\n          {(labels: any) => {\n            return labels.map((label: any) => {\n              const size = sizeScale(label.datum);\n              const color = sizeColorScale(label.datum);\n              return (\n                <LegendItem\n                  key={`legend-${label.text}-${label.index}`}\n                  onClick={(event: React.MouseEvent) => {\n                    alert(`clicked: ${JSON.stringify(label)}`);\n                  }}\n                >\n                  <svg width={size} height={size} style={{ margin: \"5px 0\" }}>\n                    <circle\n                      cx={size / 2}\n                      cy={size / 2}\n                      fill={color}\n                      r={size / 2}\n                    />\n                  </svg>\n                  <LegendLabel align={\"left\"} margin={\"0 4px\"}>\n                    {label.text}\n                  </LegendLabel>\n                </LegendItem>\n              );\n            });\n          }}\n        </LegendSize>\n      </LegendDemo>\n      <LegendDemo title=\"Quantile\">\n        <LegendQuantile scale={quantileScale}>\n          {(labels: any) => {\n            return labels.map((label: any, i: number) => {\n              const size = 15;\n              return (\n                <LegendItem\n                  key={`legend-${i}`}\n                  onClick={(event: React.MouseEvent) => {\n                    alert(`clicked: ${JSON.stringify(label)}`);\n                  }}\n                >\n                  <svg width={size} height={size} style={{ margin: \"2px 0\" }}>\n                    <circle\n                      fill={label.value}\n                      r={size / 2}\n                      cx={size / 2}\n                      cy={size / 2}\n                    />\n                  </svg>\n                  <LegendLabel align={\"left\"} margin={\"0 4px\"}>\n                    {label.text}\n                  </LegendLabel>\n                </LegendItem>\n              );\n            });\n          }}\n        </LegendQuantile>\n        ;\n      </LegendDemo>\n      <LegendDemo title=\"Linear\">\n        <LegendLinear\n          scale={linearScale}\n          labelFormat={(d: any, i: number) => {\n            if (i % 2 === 0) {\n              return oneDecimalFormat(d);\n            }\n            return \"\";\n          }}\n        >\n          {(labels: any) => {\n            return labels.map((label: any, i: number) => {\n              const size = 15;\n              return (\n                <LegendItem\n                  key={`legend-quantile-${i}`}\n                  onClick={(event: React.MouseEvent) => {\n                    alert(`clicked: ${JSON.stringify(label)}`);\n                  }}\n                >\n                  <svg width={size} height={size} style={{ margin: \"2px 0\" }}>\n                    <circle\n                      fill={label.value}\n                      r={size / 2}\n                      cx={size / 2}\n                      cy={size / 2}\n                    />\n                  </svg>\n                  <LegendLabel align={\"left\"} margin={\"0 4px\"}>\n                    {label.text}\n                  </LegendLabel>\n                </LegendItem>\n              );\n            });\n          }}\n        </LegendLinear>\n      </LegendDemo>\n      <LegendDemo title=\"Threshold\">\n        <LegendThreshold scale={thresholdScale}>\n          {(labels: any) => {\n            return labels.reverse().map((label: any, i: number) => {\n              const size = 15;\n              return (\n                <LegendItem\n                  key={`legend-quantile-${i}`}\n                  margin=\"1px 0\"\n                  onClick={(event: React.MouseEvent) => {\n                    alert(`clicked: ${JSON.stringify(label)}`);\n                  }}\n                >\n                  <svg width={size} height={size}>\n                    <rect fill={label.value} width={size} height={size} />\n                  </svg>\n                  <LegendLabel align={\"left\"} margin={\"2px 0 0 10px\"}>\n                    {label.text}\n                  </LegendLabel>\n                </LegendItem>\n              );\n            });\n          }}\n        </LegendThreshold>\n      </LegendDemo>\n      <LegendDemo title=\"Ordinal\">\n        <LegendOrdinal\n          scale={ordinalColorScale}\n          labelFormat={(label: any) => `${label.toUpperCase()}`}\n        >\n          {(labels: any) => {\n            return (\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                {labels.map((label: any, i: number) => {\n                  const size = 15;\n                  return (\n                    <LegendItem\n                      key={`legend-quantile-${i}`}\n                      margin={\"0 5px\"}\n                      onClick={(event: React.MouseEvent) => {\n                        alert(`clicked: ${JSON.stringify(label)}`);\n                      }}\n                    >\n                      <svg width={size} height={size}>\n                        <rect fill={label.value} width={size} height={size} />\n                      </svg>\n                      <LegendLabel align={\"left\"} margin={\"0 0 0 4px\"}>\n                        {label.text}\n                      </LegendLabel>\n                    </LegendItem>\n                  );\n                })}\n              </div>\n            );\n          }}\n        </LegendOrdinal>\n      </LegendDemo>\n      <LegendDemo title=\"Custom Legend\">\n        <Legend scale={shapeScale}>\n          {(labels: any) => {\n            return (\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                {labels.map((label: any, i: number) => {\n                  const size = 15;\n                  const color = ordinalColor2Scale(label.datum);\n                  const shape = shapeScale(label.datum);\n                  const shapeProps = { fill: color };\n                  const isValidElement = React.isValidElement(shape);\n                  return (\n                    <LegendItem\n                      key={`legend-quantile-${i}`}\n                      margin={\"0 4px 0 0\"}\n                      flexDirection=\"column\"\n                      onClick={(event: React.MouseEvent) => {\n                        const { datum, index } = label;\n                        alert(\n                          `clicked: ${JSON.stringify({ datum, color, index })}`\n                        );\n                      }}\n                    >\n                      <svg\n                        width={size}\n                        height={size}\n                        style={{ margin: \"0 0 8px 0\" }}\n                      >\n                        {!isValidElement &&\n                          React.createElement(shape, shapeProps)}\n                        {isValidElement && React.cloneElement(shape)}\n                      </svg>\n                      <LegendLabel align={\"left\"} margin={0}>\n                        {label.text}\n                      </LegendLabel>\n                    </LegendItem>\n                  );\n                })}\n              </div>\n            );\n          }}\n        </Legend>\n      </LegendDemo>\n      ;\n    </div>\n  );\n};\n\ninterface ILegendDemoProps {\n  children: any;\n  title: string;\n}\n\nfunction LegendDemo(props: ILegendDemoProps) {\n  const { children, title } = props;\n  return (\n    <div className=\"legend\">\n      <div className=\"title\">{title}</div>\n      {children}\n    </div>\n  );\n}\n\nexport { LegendDemos };\n","import { curveMonotoneX } from \"@vx/curve\";\nimport { GridRows } from \"@vx/grid\";\nimport { Group } from \"@vx/group\";\nimport { DateValueDatum, genDateValue } from \"@vx/mock-data\";\nimport { withParentSize, WithParentSizeProps } from \"@vx/responsive\";\nimport { Accessor, scaleLinear, scaleTime } from \"@vx/scale\";\nimport { LinePath } from \"@vx/shape\";\nimport { extent, max } from \"d3-array\";\nimport React from \"react\";\nimport { IMargin } from \"../../interfaces\";\n\nfunction genLines(num: number) {\n  return new Array(num).fill(1).map(() => {\n    return genDateValue(25);\n  });\n}\n\nconst series = genLines(12);\nconst data = series.reduce((rec, d) => {\n  return rec.concat(d);\n}, []);\n\nconst x: Accessor<DateValueDatum, Date> = (d: DateValueDatum) => d.date;\nconst y: Accessor<DateValueDatum, number> = (d: DateValueDatum) => d.value;\n\ninterface IProps {\n  width: number;\n  height: number;\n  margin: IMargin;\n}\n\nconst LinesDemo = (props: IProps) => {\n  const { height, width, margin } = props;\n  const xMax = width;\n  const yMax = height / 8;\n\n  const [minDate, maxDate] = extent(data, x) as [Date, Date];\n  const scaleTimeOptions = {\n    domain: [minDate, maxDate],\n    range: [0, xMax],\n  };\n  const xScale = scaleTime(scaleTimeOptions);\n\n  const maxValue = max(data, y) as number;\n  const scaleLinearOptions = {\n    domain: [0, maxValue],\n    range: [yMax, 0],\n    rangeRound: [1, 2],\n  };\n  const yScale = scaleLinear(scaleLinearOptions);\n\n  return (\n    <svg width={width} height={height}>\n      <rect x={0} y={0} width={width} height={height} fill=\"#242424\" rx={14} />\n      <GridRows\n        top={margin.top}\n        left={margin.left}\n        scale={xScale}\n        stroke=\"rgba(142, 32, 95, 0.9)\"\n        width={xMax}\n      />\n      {xMax > 8 &&\n        series.map((d, i) => {\n          return (\n            <Group key={`lines-${i}`} top={(i * yMax) / 2}>\n              <LinePath\n                data={d}\n                x={(dd: any) => xScale(x(dd))}\n                y={(dd: any) => yScale(y(dd))}\n                stroke={\"#ffffff\"}\n                strokeWidth={1}\n                curve={i % 2 === 0 ? curveMonotoneX : undefined}\n              />\n            </Group>\n          );\n        })}\n    </svg>\n  );\n};\n\ninterface ILinesDemoResponsiveProps extends WithParentSizeProps {\n  margin: IMargin;\n}\n\nconst LinesDemoResponsive = withParentSize(\n  (props: ILinesDemoResponsiveProps) => {\n    const { margin, parentWidth } = props;\n    // TODO: parentHeight causes a resize every time\n    return <LinesDemo height={400} width={parentWidth} margin={margin} />;\n  }\n);\n\nexport { LinesDemo, LinesDemoResponsive };\n\nexport default LinesDemo;\n","import { PatternCircles, PatternLines, PatternWaves } from \"@vx/pattern\";\nimport { Bar } from \"@vx/shape\";\nimport React from \"react\";\n\ninterface IProps {\n  height: number;\n  width: number;\n}\n\nconst PatternsDemo = (props: IProps) => {\n  const { height, width } = props;\n  const xMax = width;\n  const yMax = height - 80;\n  const pWidth = xMax / 4;\n  const pHeight = yMax / 2;\n  return (\n    <svg width={width} height={height}>\n      <PatternLines\n        id=\"vLines\"\n        height={6}\n        width={6}\n        stroke=\"black\"\n        strokeWidth={1}\n      />\n      <PatternLines\n        id=\"hLines\"\n        height={6}\n        width={6}\n        stroke=\"black\"\n        strokeWidth={1}\n        orientation={[\"horizontal\"]}\n      />\n      <PatternLines\n        id=\"dLines\"\n        height={6}\n        width={6}\n        stroke=\"black\"\n        strokeWidth={1}\n        orientation={[\"diagonal\"]}\n      />\n      <PatternLines\n        id=\"dhLines\"\n        height={6}\n        width={6}\n        stroke=\"black\"\n        strokeWidth={1}\n        orientation={[\"vertical\", \"horizontal\"]}\n      />\n      <PatternCircles id=\"Circles\" height={6} width={6} fill=\"black\" />\n      <PatternCircles\n        id=\"cCircles\"\n        height={10}\n        width={10}\n        fill=\"black\"\n        complement\n      />\n      <PatternWaves\n        id=\"Waves\"\n        height={6}\n        width={6}\n        fill=\"transparent\"\n        stroke=\"black\"\n        strokeWidth={1}\n        complement\n      />\n      <PatternWaves\n        id=\"bWaves\"\n        height={12}\n        width={12}\n        fill=\"transparent\"\n        stroke=\"black\"\n        strokeWidth={1}\n        complement\n      />\n      <Bar\n        fill={`url(#vLines)`}\n        height={pHeight}\n        width={pWidth}\n        x={0}\n        y={0}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#hLines)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth}\n        y={0}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#dLines)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth * 2}\n        y={0}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#dhLines)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth * 3}\n        y={0}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#Circles)`}\n        height={pHeight}\n        width={pWidth}\n        x={0}\n        y={pHeight}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#cCircles)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth}\n        y={pHeight}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#Waves)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth * 2}\n        y={pHeight}\n        rx={14}\n      />\n      <Bar\n        fill={`url(#bWaves)`}\n        height={pHeight}\n        width={pWidth}\n        x={pWidth * 3}\n        y={pHeight}\n        rx={14}\n      />\n    </svg>\n  );\n};\n\nexport default PatternsDemo;\n","import { GradientPinkRed } from \"@vx/gradient\";\nimport { Group } from \"@vx/group\";\nimport { scaleBand } from \"@vx/scale\";\nimport { Polygon } from \"@vx/shape\";\nimport React from \"react\";\n\ninterface IProps {\n  height: number;\n  width: number;\n}\n\ninterface IPolygon {\n  fill: string;\n  rotate: number;\n  sides: number;\n}\n\nconst polygons: IPolygon[] = [\n  {\n    fill: \"rgb(174, 238, 248)\",\n    rotate: 90,\n    sides: 3,\n  },\n  {\n    fill: \"rgb(229, 253, 61)\",\n    rotate: 45,\n    sides: 4,\n  },\n  {\n    fill: \"rgb(229, 130, 255)\",\n    rotate: 0,\n    sides: 6,\n  },\n  {\n    fill: \"url(#polygon-pink)\",\n    rotate: 0,\n    sides: 8,\n  },\n];\n\nconst yScale = scaleBand({\n  domain: polygons.map((p: IPolygon, i: number) => i),\n  padding: 20,\n});\n\nconst PolygonsDemo = (props: IProps) => {\n  const { height, width } = props;\n  return (\n    <svg width={width} height={height}>\n      <rect width={width} height={height} fill=\"#7f82e3\" rx={14} />\n      <GradientPinkRed id=\"polygon-pink\" />\n      {polygons.map((polygon, i) => (\n        <Group key={`polygon-${i}`} top={yScale(i)} left={width / 2}>\n          <Polygon\n            sides={polygon.sides}\n            size={30}\n            fill={polygon.fill}\n            rotate={polygon.rotate}\n          />\n        </Group>\n      ))}\n    </svg>\n  );\n};\n\nexport default PolygonsDemo;\n","import { Text } from \"@vx/text\";\nimport React from \"react\";\n\ninterface IProps {\n  height: number;\n  text: string;\n  width: number;\n}\n\nconst TextDemo = (props: IProps) => {\n  const { height, text, width } = props;\n  return (\n    <svg width={width} height={height}>\n      <Text\n        angle={10}\n        style={{ fill: \"black\", fontSize: \"4.5rem\", stroke: \"white\" }}\n        textAnchor=\"middle\"\n        verticalAnchor=\"middle\"\n        width={width}\n        x={width / 2}\n        y={height / 2}\n      >\n        {text}\n      </Text>\n    </svg>\n  );\n};\n\nexport default TextDemo;\n","import { AxisBottom, AxisLeft } from \"@vx/axis\";\nimport { curveBasis } from \"@vx/curve\";\nimport { GridColumns, GridRows } from \"@vx/grid\";\nimport { Group } from \"@vx/group\";\nimport { cityTemperature, CityTemperatureDatum } from \"@vx/mock-data\";\nimport { scaleLinear, scaleTime } from \"@vx/scale\";\nimport { LinePath } from \"@vx/shape\";\nimport { Threshold } from \"@vx/threshold\";\nimport { extent, max, min } from \"d3-array\";\nimport { timeParse } from \"d3-time-format\";\nimport React from \"react\";\n\nimport { IMargin } from \"../../interfaces\";\n\nconst parseDate = timeParse(\"%Y%m%d\");\n\nconst dateAccessor = (d: CityTemperatureDatum) => parseDate(d.date) as Date;\nconst nyAccessor = (d: CityTemperatureDatum) => +d[\"New York\"];\nconst sfAccessor = (d: CityTemperatureDatum) => +d[\"San Francisco\"];\n\nconst xScale = scaleTime({\n  domain: extent(cityTemperature.map(dateAccessor)) as [Date, Date],\n});\n\nconst minima = cityTemperature.map(d => min([nyAccessor(d), sfAccessor(d)]));\nconst maxima = cityTemperature.map(d => max([nyAccessor(d), sfAccessor(d)]));\nconst tempMin = min(minima as [number, number]) as number;\nconst tempMax = max(maxima as [number, number]) as number;\nconst yScale = scaleLinear({\n  domain: [tempMin, tempMax],\n  nice: true,\n});\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  width: number;\n}\n\nexport class ThresholdDemo extends React.Component<IProps> {\n  public render() {\n    const { height, margin, width } = this.props;\n    const xMax = width - margin.left - margin.right;\n    const yMax = height - margin.top - margin.bottom;\n\n    xScale.range([0, xMax]);\n    yScale.range([yMax, 0]);\n\n    return (\n      <div>\n        <svg width={width} height={height}>\n          <rect\n            fill=\"#f3f3f3\"\n            height={height}\n            rx={14}\n            width={width}\n            x={0}\n            y={0}\n          />\n          <Group left={margin.left} top={margin.top}>\n            <GridRows\n              height={yMax}\n              scale={yScale}\n              stroke=\"#e0e0e0\"\n              width={xMax}\n            />\n            <GridColumns\n              height={yMax}\n              scale={xScale}\n              stroke=\"#e0e0e0\"\n              width={xMax}\n            />\n            <line stroke=\"#e0e0e0\" x1={xMax} x2={xMax} y1={0} y2={yMax} />\n            <AxisBottom\n              numTicks={width > 520 ? 10 : 5}\n              scale={xScale}\n              top={yMax}\n            />\n            <AxisLeft scale={yScale} />\n            <text x=\"-70\" y=\"15\" transform=\"rotate(-90)\" fontSize={10}>\n              Temperature (°F)\n            </text>\n            <Threshold\n              aboveAreaProps={{\n                fill: \"green\",\n                fillOpacity: 0.4,\n              }}\n              belowAreaProps={{\n                fill: \"red\",\n                fillOpacity: 0.4,\n              }}\n              clipAboveTo={0}\n              clipBelowTo={yMax}\n              curve={curveBasis}\n              data={cityTemperature}\n              x={(d: CityTemperatureDatum) => xScale(dateAccessor(d))}\n              y0={(d: CityTemperatureDatum) => yScale(nyAccessor(d))}\n              y1={(d: CityTemperatureDatum) => yScale(sfAccessor(d))}\n            />\n            <LinePath\n              curve={curveBasis}\n              data={cityTemperature}\n              stroke=\"#000\"\n              strokeDasharray=\"1,2\"\n              strokeOpacity={0.8}\n              strokeWidth={1.5}\n              x={(d: CityTemperatureDatum) => xScale(dateAccessor(d))}\n              y={(d: CityTemperatureDatum) => yScale(sfAccessor(d))}\n            />\n            <LinePath\n              curve={curveBasis}\n              data={cityTemperature}\n              stroke=\"#000\"\n              strokeWidth={1.5}\n              x={(d: CityTemperatureDatum) => xScale(dateAccessor(d))}\n              y={(d: CityTemperatureDatum) => yScale(nyAccessor(d))}\n            />\n          </Group>\n        </svg>\n      </div>\n    );\n  }\n}\n","import { getCoordsFromEvent } from \"@vx/brush\";\nimport { RectClipPath } from \"@vx/clip-path\";\nimport { GradientOrangeRed, GradientPinkRed } from \"@vx/gradient\";\nimport { Group } from \"@vx/group\";\nimport { Accessor, scaleLinear, ScaleLinear } from \"@vx/scale\";\nimport {\n  Polygon,\n  Site,\n  voronoi,\n  VoronoiDiagram,\n  VoronoiPolygon,\n} from \"@vx/voronoi\";\nimport React from \"react\";\n\nimport { IMargin } from \"../../interfaces\";\n\nconst neighborRadius = 75;\n\ninterface IDatum {\n  id: string;\n  x: number;\n  y: number;\n}\n\nconst xAccessor = (d: IDatum) => d.x;\nconst yAccessor = (d: IDatum) => d.y;\n\nconst extent = (arr: IDatum[], accessor: Accessor<IDatum, number>) => {\n  return [Math.min(...arr.map(accessor)), Math.max(...arr.map(accessor))];\n};\n\nconst data: IDatum[] = Array(200)\n  .fill(null)\n  .map(() => {\n    const datum: IDatum = {\n      id: Math.random()\n        .toString(36)\n        .slice(2),\n      x: Math.random(),\n      y: Math.random(),\n    };\n    return datum;\n  });\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n  width: number;\n}\n\ninterface IState {\n  innerHeight: number;\n  innerWidth: number;\n  neighbors: Map<string, boolean>;\n  selected: Site | null;\n  // selectedNeighbors?: null;\n  voronoiDiagram: VoronoiDiagram;\n  xScale: ScaleLinear<number, number>;\n  yScale: ScaleLinear<number, number>;\n}\n\nexport class VoronoiDemo extends React.PureComponent<IProps, IState> {\n  public static getUpdatedState(props: IProps) {\n    const { width, height, margin } = props;\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    const xScale = scaleLinear({\n      domain: extent(data, xAccessor),\n      range: [0, innerWidth],\n    });\n\n    const yScale = scaleLinear({\n      domain: extent(data, yAccessor),\n      range: [innerHeight, 0],\n    });\n\n    const voronoiOptions = {\n      height: innerHeight,\n      width: innerWidth,\n      x: (d: IDatum) => xScale(d.x),\n      y: (d: IDatum) => yScale(d.y),\n    };\n    const voronoiDiagram = voronoi(voronoiOptions)(data);\n\n    return {\n      innerHeight,\n      innerWidth,\n      neighbors: new Map(),\n      selected: null,\n      // selectedNeighbors: null,\n      voronoiDiagram,\n      xScale,\n      yScale,\n    };\n  }\n  private svg: any;\n\n  constructor(props: IProps) {\n    super(props);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = VoronoiDemo.getUpdatedState(props);\n  }\n\n  public componentWillReceiveProps(nextProps: IProps) {\n    if (\n      nextProps.width !== this.props.width ||\n      nextProps.height !== this.props.height\n    ) {\n      this.setState(VoronoiDemo.getUpdatedState(nextProps));\n    }\n  }\n\n  public render() {\n    const { width, height, margin } = this.props;\n\n    const {\n      voronoiDiagram,\n      innerWidth,\n      innerHeight,\n      xScale,\n      yScale,\n      selected,\n      neighbors,\n    } = this.state;\n\n    const polygons = voronoiDiagram.polygons();\n\n    return (\n      <svg\n        width={width}\n        height={height}\n        ref={(ref: any) => {\n          this.svg = ref;\n        }}\n      >\n        <GradientOrangeRed id=\"voronoi_orange_red\" />\n        <GradientPinkRed id=\"voronoi_pink_red\" />\n        <rect\n          fill=\"url(#voronoi_pink_red)\"\n          height={innerHeight}\n          rx={14}\n          width={innerWidth}\n        />\n        <RectClipPath\n          id=\"voronoi_clip\"\n          height={innerHeight}\n          rx={14}\n          width={innerWidth}\n        />\n        <Group\n          clipPath=\"url(#voronoi_clip)\"\n          left={margin.left}\n          onMouseLeave={this.handleMouseLeave}\n          onMouseMove={this.handleMouseMove}\n          top={margin.top}\n        >\n          {polygons.map((polygon: Polygon) => {\n            const hasNeighbors = neighbors.get(polygon.data.id);\n            return (\n              <VoronoiPolygon\n                fill={\n                  selected &&\n                  (polygon.data.id === selected.data.id || hasNeighbors)\n                    ? \"url(#voronoi_orange_red)\"\n                    : \"url(#voronoi_pink_red)\"\n                }\n                fillOpacity={neighbors && hasNeighbors ? 0.4 : 1}\n                key={`polygon-${polygon.data.id}`}\n                polygon={polygon}\n                stroke=\"#ffffff\"\n                strokeWidth={1}\n              />\n            );\n          })}\n          {data.map((d: IDatum) => (\n            <circle\n              cx={xScale(d.x)}\n              cy={yScale(d.y)}\n              fill=\"#ffffff\"\n              fillOpacity={0.5}\n              key={`circle-${d.id}`}\n              r={2}\n            />\n          ))}\n        </Group>\n      </svg>\n    );\n  }\n\n  private handleMouseMove(event: React.MouseEvent) {\n    const { voronoiDiagram } = this.state;\n    const { x, y } = getCoordsFromEvent(this.svg, event);\n    const closest = voronoiDiagram.find(x, y, neighborRadius);\n\n    if (closest) {\n      const neighbors = new Map();\n      const cell = voronoiDiagram.cells[closest.index];\n      cell.halfedges.forEach((index: number) => {\n        const edge = voronoiDiagram.edges[index];\n        const { left, right } = edge;\n        if (left && left !== closest) {\n          neighbors.set(left.data.id, true);\n        } else if (right && right !== closest) {\n          neighbors.set(right.data.id, true);\n        }\n      });\n      this.setState({ selected: closest, neighbors });\n    }\n  }\n\n  private handleMouseLeave(event: React.MouseEvent) {\n    this.setState({ selected: null, neighbors: new Map() });\n  }\n}\n","import { appleStock } from \"@vx/mock-data\";\nimport { ParentProps, ParentSize } from \"@vx/responsive\";\nimport React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nimport { AreaDemo, AreaDemoWithTooltip } from \"../AreaDemo\";\nimport { AxisDemoResponsive } from \"../AxisDemo\";\nimport { CurveDemo } from \"../CurveDemo\";\nimport { DragDemo } from \"../DragDemo\";\nimport { GeoDemo } from \"../GeoDemo\";\nimport { GlyphDemo } from \"../GlyphDemo\";\nimport GradientsDemo from \"../GradientsDemo\";\nimport HeatmapsDemo from \"../HeatmapsDemo\";\nimport { LegendDemos } from \"../LegendDemo\";\nimport { LinesDemoResponsive } from \"../LinesDemo\";\nimport PatternsDemo from \"../PatternsDemo\";\nimport PolygonsDemo from \"../PolygonsDemo\";\nimport TextDemo from \"../TextDemo\";\nimport { ThresholdDemo } from \"../ThresholdDemo\";\nimport { VoronoiDemo } from \"../VoronoiDemo\";\nimport logo from \"./logo.svg\";\n\nconst Div = styled.div`\n  text-align: center;\n`;\n\nconst rotate = () => keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst RotatingLogo = styled.img`\n  animation: ${rotate()} infinite 20s linear;\n  height: 40vmin;\n`;\n\nconst Header = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\n/*\n  CSS Grid auto-fit for responsiveness: https://gridbyexample.com/examples/example37/\n  Common CSS breakpoints:\n  https://stackoverflow.com/questions/6370690/media-queries-how-to-target-desktop-tablet-and-mobile#7354648\n*/\ninterface IGridProps {\n  gridGap: number;\n}\nconst Grid = styled.div`\n  background-color: #282c34;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));\n  grid-gap: ${(props: IGridProps) => `${props.gridGap}` + \"rem\"};\n`;\n\ninterface IMargin {\n  bottom: number;\n  left: number;\n  right: number;\n  top: number;\n}\n\ninterface IProps {\n  height: number;\n  margin: IMargin;\n}\n\nconst stock = appleStock.slice(800);\n\nclass App extends React.Component<IProps> {\n  public static defaultProps: Partial<IProps> = {\n    height: 400,\n    margin: {\n      bottom: 30,\n      left: 50,\n      right: 10,\n      top: 10,\n    },\n  };\n  public render() {\n    const { height, margin } = this.props;\n    return (\n      <Div>\n        <Header>\n          <h1>vx-kitchensink</h1>\n          <RotatingLogo src={logo} alt=\"logo\" />\n        </Header>\n        <Grid gridGap={2}>\n          <AxisDemoResponsive margin={margin} />\n          <LinesDemoResponsive margin={margin} />\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <GradientsDemo height={height} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <PatternsDemo height={height} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <PolygonsDemo height={height} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <HeatmapsDemo\n                  height={height}\n                  margin={margin}\n                  separation={20}\n                  width={width}\n                />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <AreaDemo\n                  height={height}\n                  ruler={{ left: width / 2, top: height / 2 }}\n                  margin={margin}\n                  // onMouseMove={(event: Event) => console.warn(\"Move\", event)}\n                  width={width}\n                />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <AreaDemoWithTooltip\n                  height={height}\n                  margin={margin}\n                  width={width}\n                />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <TextDemo\n                  height={height}\n                  text={\"This is a test\"}\n                  width={width}\n                />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <LegendDemos height={height} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <GlyphDemo height={height} margin={margin} width={width} />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <GeoDemo height={height} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <ThresholdDemo height={height} margin={margin} width={width} />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return <DragDemo height={height} margin={margin} width={width} />;\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <VoronoiDemo height={height} margin={margin} width={width} />\n              );\n            }}\n          </ParentSize>\n          <ParentSize>\n            {(props: ParentProps) => {\n              const { width } = props;\n              return (\n                <CurveDemo height={height} margin={margin} width={width} />\n              );\n            }}\n          </ParentSize>\n        </Grid>\n      </Div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}